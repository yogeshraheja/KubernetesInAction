Service Operations:
===================
Case1: Simple Service Creation Explanation

- kubectl create -f file.yml
- kubectl get svc
- kubectl describe svc <service-name>
- kubectl delete svc <service-name>

apiVersion: v1
kind: Service
metadata:
  name: myapp-service

spec:
  type: NodePort
  ports:
  - targetPort: 80
    port: 80
    nodePort: 30008


==========================


Full Example CASE2 (POD and Service):

- kubectl create -f file.yml
- kubectl get svc
- kubectl describe svc <service-name>
- kubectl get pods
- kubectl describe pod <PN>   (Note the IP of the POD)
- kubectl get ep (Note the POD IP is the EP for the service)
- Access the webapp from the browser

---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapppod
spec:
  containers:
  - name: httpd
    image: httpd
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-podservice

spec:
  type: NodePort
  ports:
  - targetPort: 80
    port: 80
    nodePort: 30008
  selector:
    app: myapppod



=============

CASE2: (deployment and service): This is used in Production (with self-healing)

- kubectl create -f file.yml
- kubectl get svc
- kubectl describe svc <service-name>
- kubectl get deployment & RS & POD
- kubectl describe pod <PN>   (Note the IP of the POD)
- kubectl get ep (Note the POD IP is the EP for the service)
- Access the webapp from the browser

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myappdep
  labels:
    app: myapp
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
    spec:
      containers:
      - name: httpd-container
        image: httpd

  replicas: 3
  selector:
    matchLabels:
      app: myapp
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service

spec:
  type: NodePort
  ports:
  - targetPort: 80
    port: 80
    nodePort: 30009
  selector:
    app: myapp


