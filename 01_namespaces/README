Case1: Create a simple Namespace with command line

- kubectl create ns yogeshtest
- kubectl get ns
- kubectl describe ns yogeshtest
- kubectl delete ns yogeshtest

OR

Case2: Create the same with yaml

- kubectl create -f file.yml
- kubectl get ns
- kubectl describe ns yogeshtest
- kubectl delete ns yogeshtest

apiVersion: v1
kind: Namespace
metadata: 
  name: yogeshtest

=============

Case 3: Create a namespace and assign quota to it (you can assign cpus. memory, no of pods etc). In this example we will create a NS (yogeshtest) and assign a quota to create only one POD in this namespace.

- kubectl create -f file.yml (above one for namespace)
- kubectl create -f file2.yml (below one for quota create)
- kubectl get quota -n yogeshtest
- kubectl describe quota quotatest -n yogeshtest
- kubectl create deployment yogeshdep --imageyogeshraheja/devopsinaction:v1
- Check the pods (get, describe and show everything is in running state)
- Now scale up the deployment and see the POD will not get scaled as quota is to have only one POD in this namespace
- kubectl scale deployment yogeshdep -n yogeshtest --replicas=2

(This will be a good example for NameSpaces and Quotas in real terms)

Error will be like (during describe of rs):
=========================================== 
  Warning  FailedCreate      13s (x5 over 52s)  replicaset-controller  (combined from similar events): Error creating: pods "thinknyxdep-757f47c7c-z2kj2" is forbidden: exceeded quota: quotatest, requested: pods=1, used: pods=1, limited: pods=1


apiVersion: v1
kind: ResourceQuota
metadata:
  name: quotatest
  namespace: yogeshtest
spec:
  hard:
    pods: "1"

=========

Initial Yogesh Notes:

Now create one POD inside the newly created NS (all worked)
Scale up the POD (it will show quotas messages)
